package kr.or.ddit.controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;
import kr.or.ddit.service.EventServiceImpl;
import kr.or.ddit.service.iEventService;
import kr.or.ddit.vo.EventVo;
import kr.or.ddit.vo.MemberVo;
@WebServlet("/eventInsert")
@MultipartConfig
public class EventInsertController extends HttpServlet{

	iEventService eventService = EventServiceImpl.getInstance();
//	String upload_dir = "../../../../../../../WebContent/resources/boogie/edu-meeting/assets/images/"; // init -> xml?
//	String upload_dir = "/MiddleProj/WebContent/resources/boogie/edu-meeting/assets/images"; // init -> xml?
//	String upload_dir = "upload_files"; // init -> xml?
//	String upload_dir; // init -> xml?
//	String upload_dir = "/WebContent/resources/boogie/edu-meeting/assets/images";

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
	    HttpSession session = req.getSession();
	    MemberVo member = (MemberVo) session.getAttribute("member");
	    session.setAttribute("member", member);
	    
		String boardNo = req.getParameter("boardNo");
//		
		EventVo event = eventService.eventDetail(boardNo);
//		
		req.setAttribute("event", event);
		// 멤버 권한 체크
	    if (member == null || (member.getMemCode() != 2 && member.getMemCode() != 3)) {
	        resp.setContentType("text/html; charset=UTF-8");
	        resp.getWriter().write("<script>alert('글쓰기 권한이 없습니다.'); history.back();</script>");
	        return;
	    }else {
	    	req.getRequestDispatcher("WEB-INF/view/eventInsert.jsp").forward(req, resp);
	    }

		
		

		
		
				
	
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		HttpSession session = req.getSession();
	    MemberVo member = (MemberVo) session.getAttribute("member");
	    session.setAttribute("member", member);
		
//		String uploadPath = req.getServletContext().getRealPath("/resources/boogie/edu-meeting/assets/images");
//		File uploadDir = new File(uploadPath);
		
	    // 요청 파라미터 추출
	    String title = req.getParameter("title");
	    String content = req.getParameter("content");
	    String boardStart = req.getParameter("boardStart");
	    String boardEnd = req.getParameter("boardEnd");
//	    int memNo = Integer.parseInt(req.getParameter("memNo"));
	    // 파일 파트 가져오기
	 
//	    1. getPart로 파트 html태그 이름을 써서 파일 갖고오기
	    Part part = req.getPart("attachedFiles");

	    
	    
//	    System.out.println("upload_dir" + uploadPath);
//	    2. 경로 설정하기

//	    String uploadPath = req.getServletContext().getRealPath("/resources/boogie/edu-meeting/assets/images/uploadFiles");
	    String uploadPath = "resources/boogie/edu-meeting/assets/images/upload";
	    
	    System.out.println("2. 경로 설정하기 : " + uploadPath);
//	    3. 폴더 생성(저장경로가 없다면 생성)
	    
	    File uploadDir = new File(uploadPath);
	    if (!uploadDir.exists()) {
	        uploadDir.mkdirs(); // 디렉토리가 없으면 생성
	        System.out.println("생성완료");
	    }else {
	    	System.out.println("생성안됨");
	    }

//	    4. 파일명 가져오기
        String fileName = part.getSubmittedFileName().toString();
        File file = new File(uploadPath + File.separator + fileName);
	    
//	    파일을 가져와서 new File으 ㄹ해준다.
//	    경로 + 파일명에 해당하는 파일 객체 생성
//	    5. 파일을 저장한다
        try (InputStream input = part.getInputStream()) {
            Files.copy(input, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
            System.out.println("저장완료");
            System.out.println("file.toPath() " + file.toPath());
        }
	    
        
        
	    // 데이터베이스에 저장할 VO 생성 및 값 설정
	    EventVo event = new EventVo();
	    event.setBoardTitle(title);
	    event.setBoardContent(content);
	    event.setMemNo(member.getMemNo()); 
	    event.setBoardImg(part.getSubmittedFileName()); // 파일명 저장
	    event.setBoardStart("2024.04.10");
	    event.setBoardEnd("2024.10.03");

	    // 서비스 호출
	    eventService.eventInsert(event);
	    System.out.println("저장상태" + event);
	    // 목록 페이지로 리다이렉트
	    resp.sendRedirect(req.getContextPath() + "/eventList");
	}

}
