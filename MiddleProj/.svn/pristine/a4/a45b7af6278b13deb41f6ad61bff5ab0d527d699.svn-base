package kr.or.ddit.api;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.time.format.DateTimeFormatter;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;

import kr.or.ddit.service.MovieServiceImpl;
import kr.or.ddit.service.iMovieService;
import kr.or.ddit.vo.BoxofficeVo;
import kr.or.ddit.vo.MovieVo;

public class koficAPI {
	public static void main(String[] args) throws Exception {
		koficAPI ka = new koficAPI();
		ka.getAPI();

	}

	iMovieService movieService = MovieServiceImpl.getInstance();

	public void getAPI() throws Exception {
		LocalDate yesterday = LocalDate.now().minusDays(1);
		String yestStr = yesterday.format(DateTimeFormatter.ofPattern("yyyyMMdd"));

		StringBuilder urlBuilder = new StringBuilder(
				"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json");
		urlBuilder.append("?" + URLEncoder.encode("key", "UTF-8") + "="
				+ URLEncoder.encode("de8022431ff65b017292da8f4ccb5ef6", "utf-8")); /* Service Key */
		urlBuilder.append("&" + URLEncoder.encode("targetDt", "UTF-8") + "=" + URLEncoder.encode(yestStr, "utf-8"));

		URL url = new URL(urlBuilder.toString());
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");
		conn.setRequestProperty("Content-type", "application/json");

		// API 요청 후 응답 출력
		System.out.println("API URL: " + urlBuilder.toString());
		System.out.println("Response Code: " + conn.getResponseCode());

		BufferedReader rd;
		if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
			rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"));
		} else {
			rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
		}

		StringBuilder sb = new StringBuilder();
		String line;
		while ((line = rd.readLine()) != null) {
			sb.append(line);
		}
		rd.close();
		conn.disconnect();

		parseBoxOffice(sb.toString());

		System.out.println("Response: " + sb.toString());
	}

	public void parseBoxOffice(String jsonString) throws JsonSyntaxException {
		System.out.println("Received JSON: " + jsonString);

	    Gson gson = new Gson();
		JsonObject jsonObject;
		    
		try {
		    jsonObject = gson.fromJson(jsonString, JsonObject.class);
		// JSON 구조 검증
		if (!jsonObject.has("boxOfficeResult")) {
			System.out.println("Unexpected response structure: " + jsonString);
			return;
		}

			JsonObject boxOfficeResult = gson.fromJson(jsonString, JsonObject.class);
			 if (!boxOfficeResult.has("dailyBoxOfficeList")) {
		            System.out.println("No dailyBoxOfficeList found.");
		            return;
		        }
			
			JsonArray resultArray = boxOfficeResult.getAsJsonArray("dailyBoxOfficeList");

			for (int j = 0; j < resultArray.size(); j++) {
				JsonObject movie = resultArray.get(j).getAsJsonObject();

				// 영화 정보 추출
				int rank = movie.get("rank").getAsInt();
				String movieCode = movie.get("movieCd").getAsString();
				String movieName = movie.get("movieNm").getAsString().trim();
				String releaseDate = movie.get("openDt").getAsString();
				int audi = movie.get("audiCnt").getAsInt();
				int people = movie.get("audiAcc").getAsInt();

				// string -> localdate형식으로 바꾼 뒤에 format 형식 변형
				int releaseDateInt = Integer
						.parseInt(LocalDate.parse(releaseDate).format(DateTimeFormatter.ofPattern("yyyyMMdd")));

				BoxofficeVo boxoffice = new BoxofficeVo();
				LocalDate yesterday = LocalDate.now().minusDays(1);
				String yestStr = yesterday.format(DateTimeFormatter.ofPattern("yyyyMMdd"));
				int yest = Integer.parseInt(yestStr);

				// 박스오피스 정보 설정
				boxoffice.setRank(rank);
				boxoffice.setMovieName(movieName);
				boxoffice.setBoxofficeDate(yest);
				boxoffice.setReleaseDate(releaseDateInt);
				boxoffice.setTotalPeople(people);
				boxoffice.setTodayPeople(audi);

				System.out.println(boxoffice);

				if (movieService.boxOfficeExists() != null) {
					System.out.println("데이터 이미 존재" + yest);
					continue;
				}
				movieService.insertBox(boxoffice);
				try {
					searchMovie(movieName, releaseDateInt);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		 } catch (JsonSyntaxException e) {
		        System.out.println("JSON 파싱 오류: " + e.getMessage());
		        System.out.println("받은 JSON: " + jsonString);
		    } catch (Exception e) {
		        System.out.println("예외 발생: " + e.getMessage());
		        e.printStackTrace();
		    }
	}

	public void searchMovie(String movieName, int releaseDateInt) throws Exception {

		// db에 찾아봐(movie table에 10개의 영화가 있는지)

		MovieVo movie = new MovieVo();
		movie.setMovieName(movieName);
		movie.setMovieRelease(releaseDateInt);

		MovieVo movieVO = movieService.getMovieNameRelease(movie);
		System.out.println(movieVO);
		System.out.println("---------------");

		// db에 없으면 kmdb api에 요청
		if (movieVO == null) {
			StringBuilder urlBuilder = new StringBuilder(
					"http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_json2.jsp?collection=kmdb_new2");
			urlBuilder.append("&" + URLEncoder.encode("ServiceKey", "UTF-8") + "="
					+ URLEncoder.encode("FFL9003M35F6J0562575", "utf-8")); /* Service Key */
			urlBuilder.append("&" + URLEncoder.encode("detail", "UTF-8") + "=" + URLEncoder.encode("Y", "utf-8"));
			urlBuilder.append(
					"&" + URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(movie.getMovieName(), "utf-8"));
			urlBuilder.append("&" + URLEncoder.encode("releaseDts", "UTF-8") + "="
					+ URLEncoder.encode(movie.getMovieRelease() + "", "utf-8"));

			URL url = new URL(urlBuilder.toString());
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Content-type", "application/json");

			BufferedReader rd;
			if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
				rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			} else {
				rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
			}

			StringBuilder sb = new StringBuilder();
			String line;
			while ((line = rd.readLine()) != null) {
				sb.append(line);
			}
			rd.close();
			conn.disconnect();
			parseMovies(sb.toString());
		}

	}

	public void parseMovies(String jsonString) {
		Gson gson = new Gson();
		JsonObject jsonObject = gson.fromJson(jsonString, JsonObject.class);
		JsonArray dataArray = jsonObject.getAsJsonArray("Data");

		// Data 배열을 반복
		for (int i = 0; i < dataArray.size(); i++) {
			JsonObject dataItem = dataArray.get(i).getAsJsonObject();
			JsonArray resultArray = dataItem.getAsJsonArray("Result");

			// Result 배열을 반복
			for (int j = 0; j < resultArray.size(); j++) {
				JsonObject movie = resultArray.get(j).getAsJsonObject();

				// 영화 정보 추출
				String movieCode = movie.get("DOCID").getAsString();

				// db에 있는지 확인
				MovieVo movieNo = new MovieVo();
				movieNo.setMovieNo(movieCode);

				if (movieService.getMovie(movieNo) != null) {
					continue;
				}

				String title = movie.get("title").getAsString();
				if (title.contains("!HE") || title.contains("!HS")) {
					title = title.replace("!HS", "").replace("!HE", "").replaceAll("\\s+", " ").trim();
				} else {
					title = title.trim();

				}
				String company = movie.get("company").getAsString();

				Integer releaseDate = null; // Integer로 변경
				String releaseDateStr = movie.get("repRlsDate").getAsString();

				LocalDate now = LocalDate.now();
				String nowStr = now.format(DateTimeFormatter.ofPattern("yyyyMMdd")); // 현재 날짜 포맷
				int date = Integer.parseInt(nowStr);

				if (releaseDateStr != null && !releaseDateStr.isEmpty()) {
					// 월 처리
					if (releaseDateStr.substring(4, 6).equals("00")) {
						releaseDateStr = releaseDateStr.substring(0, 4) + "01" + releaseDateStr.substring(6, 8);
					}

					// 일 처리
					if (releaseDateStr.substring(6, 8).equals("00")) {
						releaseDateStr = releaseDateStr.substring(0, 6) + "01";
					}

					try {
						releaseDate = Integer.parseInt(releaseDateStr);
					} catch (NumberFormatException e) {
						System.out.println("잘못된 날짜 형식: " + releaseDateStr);
						releaseDate = null; // null로 설정
					}
				}

				String poster = movie.get("posters").getAsString().split("\\|")[0];

				String country = movie.get("nation").getAsString();
				String content = movie.getAsJsonObject("plots").getAsJsonArray("plot").get(0).getAsJsonObject()
						.get("plotText").getAsString();
				int runningTime = 0;
				String runtimeStr = movie.get("runtime").getAsString();
				if (!runtimeStr.isEmpty()) {
					runningTime = Integer.parseInt(runtimeStr);
				}

				String trailer = movie.getAsJsonObject("vods").getAsJsonArray("vod").get(0).getAsJsonObject()
						.get("vodUrl").getAsString();
				String level = movie.getAsJsonObject("ratings").getAsJsonArray("rating").get(0).getAsJsonObject()
						.get("ratingGrade").getAsString();
				int boxoffice = 0;
				String boxofficeStr = movie.getAsJsonArray("stat").get(0).getAsJsonObject().get("audiAcc")
						.getAsString();
				if (!boxofficeStr.isEmpty()) {
					boxoffice = Integer.parseInt(boxofficeStr);
				}
				MovieVo movieVo = new MovieVo();

				if (releaseDate == 0) {
					movieVo.setMovieState("상영안함");
				} else {
					LocalDate releaseLocalDate = LocalDate.parse(releaseDateStr,
							DateTimeFormatter.ofPattern("yyyyMMdd"));
					LocalDate compareDate = releaseLocalDate.plusDays(14);

					if (releaseLocalDate.isAfter(now)) {
						movieVo.setMovieState("개봉예정");
					} else if (now.isAfter(releaseLocalDate) && now.isBefore(compareDate)) {
						// 개봉 날짜가 현재 날짜보다 14일 전인지 확인
						movieVo.setMovieState("상영중");
					} else {
						movieVo.setMovieState("상영안함");
					}
				}

				movieVo.setMovieNo(movieCode);
				movieVo.setMovieName(title);
				movieVo.setMoviePoster(poster);
				movieVo.setMovieCompany(company);
				movieVo.setMovieRelease(releaseDate);
				movieVo.setMovieCountry(country);
				movieVo.setMovieContent(content);
				movieVo.setMovieRunningtime(runningTime);
				if (trailer == "") {
					movieVo.setMovieTrailer("");
				} else {
					movieVo.setMovieTrailer(trailer);
				}
				movieVo.setMovieLevel(level);
				movieVo.setBoxoffice(boxoffice);

				System.out.println("movieVO: " + movieVo);
				movieService.insertMovie(movieVo);
			}

		}

	}

}
